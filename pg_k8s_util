#!/usr/bin/env python3

import os
import argparse
import time
import re
import subprocess
import yaml
import json
import logging
import datetime
from typing import Dict, Any, List
from urllib.request import urlopen
from urllib.error import URLError

logger = logging.getLogger('pg_k8s_util')


def get_patroni_status(patroni_url: str) -> Dict[str, Any]:
    try:
        res = urlopen(patroni_url)
    except URLError:
        return {'state': 'down'}
    return json.loads(res.read().decode('utf8'))


def get_config(path: str) -> Dict[str, Any]:
    with open(path, 'rt') as fp:
        return yaml.load(fp, Loader=yaml.SafeLoader)


def prepare_wal_g_environ(config: Dict[str, Any]) -> Dict[str, str]:
    environ = {}

    for name, value in os.environ.items():
        if name.startswith('PG'):
            environ[name] = value

    for name in {'PGUSER', 'PGPASSWORD'}:
        if name not in environ:
            value_file = environ.get(name + 'FILE')
            if value_file is not None:
                with open(value_file, 'rt', encoding='utf8') as fp:
                    environ[name] = fp.read().strip()

    if config['backup']['env']:
        for name, value in config['backup']['env'].items():
            environ[name] = str(value)

    if config['backup']['envFrom']:
        for path in config['backup']['envFrom']:
            for name in os.listdir(path):
                full_name = os.path.join(path, name)
                if os.path.isfile(full_name):
                    with open(full_name, 'rt', encoding='utf8') as fp:
                        value = fp.read().strip()
                    environ[name] = value

    return environ


def exec_wal_g(config: Dict[str, Any], wal_g: str, wal_g_args: List[str]) -> None:
    command = [wal_g] + wal_g_args
    environ = prepare_wal_g_environ(config)
    os.execve(command[0], command, environ)


def run_wal_g(config: Dict[str, Any], wal_g: str, wal_g_args: List[str], **kwargs) -> subprocess.CompletedProcess:
    command = [wal_g] + wal_g_args
    environ = prepare_wal_g_environ(config)
    return subprocess.run(command, env=environ, **kwargs)


def cmd_wal_g(args: argparse.Namespace) -> None:
    config = get_config(args.config)

    backup_config = config.get('backup')
    if backup_config is None:
        logger.info('Backup config is missing')
        return

    if not config['backup']['enabled']:
        logger.info('Backup is not enabled')
        return

    exec_wal_g(config, args.wal_g, args.wal_g_args)


def backup_iteration(config, args):
    # type: (Dict[str, Any], argparse.Namespace) -> None
    backup_config = config.get('backup')
    if backup_config is None:
        logger.info('Backup config is missing')
        return

    if not config['backup']['enabled']:
        logger.info('Backup is not enabled')
        return

    status = get_patroni_status(args.patroni_url)

    if status['state'] != 'running':
        logger.info('Database is not running')
        return

    if status['role'] != 'master':
        logger.info('Database is not master')
        return

    proc = run_wal_g(config, args.wal_g, ["backup-list", "--json"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if proc.returncode != 0:
        logger.error('Failed to get list of backups')
        return

    if not proc.stdout:
        backups = []
    else:
        backups = json.loads(proc.stdout.decode('utf8'))

    most_recent_backup_time = None
    for backup in backups:
        backup_time = (
            datetime.datetime
            .strptime(backup['time'], '%Y-%m-%dT%H:%M:%SZ')
            .replace(tzinfo=datetime.timezone.utc)
        )
        if most_recent_backup_time is None or most_recent_backup_time < backup_time:
            most_recent_backup_time = backup_time

    interval_str = backup_config.get('interval')
    try:
        interval = str_to_timedelta(interval_str or '1d')
    except ValueError:
        logger.error('Invalid backup interval "%s" found in the config file', interval_str)
        return

    now = datetime.datetime.now(datetime.timezone.utc)
    if most_recent_backup_time is None or (now - most_recent_backup_time) > interval:
        logger.info('Running backup process')
        proc = run_wal_g(config, args.wal_g, ["backup-push", args.db_dir])
        if proc.returncode != 0:
            logging.error('Backup failed')
        else:
            retention_config = backup_config.get('retention')
            if retention_config is not None:
                count = retention_config.get('count')
                if count is not None:
                    logger.info('Running backup cleanup process')
                    proc = run_wal_g(config, args.wal_g, ["delete", "retain", "FIND_FULL", str(count), "--confirm"])
                    if proc.returncode != 0:
                        logging.error('Backup cleanup failed')
    else:
        delay = interval - (now - most_recent_backup_time)
        logger.info('Waiting for %s before running the next backup', delay)


def cmd_backup_manager(args):
    # type: (argparse.Namespace) -> None
    while True:
        config = get_config(args.config)
        backup_iteration(config, args)
        time.sleep(60)


def str_to_timedelta(s):
    # type: (str) -> datetime.timedelta
    match = re.match(r'^(\d+)(m|h|d|w)$', s)
    if match is not None:
        count = int(match.group(1))
        if match.group(2) == 'm':
            return datetime.timedelta(minutes=count)
        if match.group(2) == 'h':
            return datetime.timedelta(hours=count)
        if match.group(2) == 'd':
            return datetime.timedelta(days=count)
        if match.group(2) == 'w':
            return datetime.timedelta(weeks=count)
    raise ValueError('Invalid interval')


def main():
    # type: () -> None

    default_db_dir = os.environ.get('PGDATA')
    if default_db_dir is None:
        default_db_dir = '/postgresql/data/pgroot/data'

    parser = argparse.ArgumentParser()
    parser.set_defaults(func=None)
    parser.add_argument('-c', '--config', metavar='PATH', dest='config',
                        default='/postgresql/config/cluster.yaml',
                        help='Path to the WAL-G binary')
    parser.add_argument('-w', '--wal-g', metavar='PATH', dest='wal_g',
                        default='/usr/local/bin/wal-g',
                        help='Path to the WAL-G binary')
    parser.add_argument('-p', '--patroni-url', metavar='URL', dest='patroni_url',
                        default='http://127.0.0.1:8008/patroni',
                        help='URL to the Patroni API')

    subparsers = parser.add_subparsers()

    wal_g_parser = subparsers.add_parser('wal-g', help='Run wal-g')
    wal_g_parser.add_argument('wal_g_args', nargs=argparse.REMAINDER)
    wal_g_parser.set_defaults(func=cmd_wal_g)

    backup_parser = subparsers.add_parser('backup', help='Backup operations')
    backup_subparsers = backup_parser.add_subparsers()

    backup_manager_parser = backup_subparsers.add_parser('manager', help='Run backup manager')
    backup_manager_parser.add_argument('-d', '--db-dir', metavar='PATH', help='Database directory',
                                       default=default_db_dir)
    backup_manager_parser.set_defaults(func=cmd_backup_manager)

    args = parser.parse_args()
    if args.func is None:
        parser.print_help()
        raise SystemExit(1)

    logging.basicConfig(
        level=logging.INFO,
        datefmt='%Y/%m/%d %H:%M:%S',
        format='{levelname}: {asctime}.{msecs:03.0f} {message}',
        style='{',
    )

    args.func(args)


if __name__ == '__main__':
    main()
